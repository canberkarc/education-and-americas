pipeline MyTreePipeline {
    
    // Author: Canberk Arıcı

    // Pipeline to extract data from given url,
    // interpret the data as a table
    // then load it into a database
    TreeDataExtractor
        -> TreeTextFileInterpreter
        -> TreeCSVInterpreter
        -> TreeColumnDeleter
        -> TreeTableInterpreter
        -> DatabaseLoader;

    // Extractor block to extract data from the given URL
    block TreeDataExtractor oftype HttpExtractor { 
        url: "https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/stadt-neuss-herbstpflanzung-2023/exports/csv"; 
    }

    // Block to interpret the text file
    block TreeTextFileInterpreter oftype TextFileInterpreter {}

    // Block to interpret the CSV data
    block TreeCSVInterpreter oftype CSVInterpreter { 
        delimiter: ";";
        enclosing: '"';
    }

    // Drop column "baumart_deutsch" which corresponds to column "E"
    block TreeColumnDeleter oftype ColumnDeleter {
        delete: [column E];
    }

    // Block to interpret the data as a table
    block TreeTableInterpreter oftype TableInterpreter {
        header: true; 
        columns: [
            "lfd_nr" oftype integer,
            "stadtteil" oftype stadtteilValidDataType,
            "standort" oftype text,
            "baumart_botanisch" oftype text,
            "id" oftype idValidDataType,
            "baumfamilie" oftype text
        ];

    }

    // load data into a SQLite database
    block DatabaseLoader oftype SQLiteLoader { 
        table: "trees"; 
        file: "./trees.sqlite"; 
    }
}

// Define a new data type for column "stadtteil"
// Thus, exclude all rows in which the 'stadtteil' column does not start with 'Vogelsang.'"
valuetype stadtteilValidDataType oftype text {
  constraints: [
    ValidStadtteil,
  ];
}

// Define a new data type for column "id" which contains geopoints
// then, check for the pattern {geo-coordinate 1}, {geo-coordinate 2}
valuetype idValidDataType oftype text {
  constraints: [
    ValidId,
  ];
}

// Regex to match values starting with 'Vogelsang'
constraint ValidStadtteil on text: value matches /^Vogelsang.*/;

// Regex for the pattern {geo-coordinate 1}, {geo-coordinate 2}
constraint ValidId on text: value matches /^(\d{1,3}\.\d+),\s*(\d{1,3}\.\d+)$/;
